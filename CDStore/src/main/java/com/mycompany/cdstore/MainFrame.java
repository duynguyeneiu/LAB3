/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.cdstore;

import java.awt.*;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Student
 */
public class MainFrame extends javax.swing.JFrame {

    ArrayList<CD> list = new ArrayList<>();

    public MainFrame() {
        initComponents();
        setVisible(true);
        setLocationRelativeTo(null);
    }
    String fileName = "CD.Dat";

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        newCDButton = new javax.swing.JButton();
        backupButton = new javax.swing.JButton();
        restoreButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        findingType = new javax.swing.JComboBox<>();
        findingText = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        newCDButton.setText("New CD");
        newCDButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newCDButtonMouseClicked(evt);
            }
        });
        newCDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newCDButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 3);
        getContentPane().add(newCDButton, gridBagConstraints);

        backupButton.setText("Backup");
        backupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backupButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        getContentPane().add(backupButton, gridBagConstraints);

        restoreButton.setText("Restore");
        restoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restoreButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        getContentPane().add(restoreButton, gridBagConstraints);

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        getContentPane().add(refreshButton, gridBagConstraints);

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 20);
        getContentPane().add(deleteButton, gridBagConstraints);

        findingType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Title", "Collection", "Type", "Price" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 3);
        getContentPane().add(findingType, gridBagConstraints);

        findingText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findingTextActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 5);
        getContentPane().add(findingText, gridBagConstraints);

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(searchButton, gridBagConstraints);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title", "Collection", "Type", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Table);
        if (Table.getColumnModel().getColumnCount() > 0) {
            Table.getColumnModel().getColumn(0).setHeaderValue("Title");
            Table.getColumnModel().getColumn(1).setHeaderValue("Collection");
            Table.getColumnModel().getColumn(2).setHeaderValue("Type");
            Table.getColumnModel().getColumn(3).setHeaderValue("Price");
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 25, 0);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backupButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        int selectedFile = chooser.showOpenDialog(this);
        if (selectedFile == JFileChooser.APPROVE_OPTION) {
            fileName = chooser.getSelectedFile().getPath();
        }
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(fileName))) {
            this.list = (ArrayList<CD>) ois.readObject();
            ois.close();
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Error backup data: " + ex.getMessage());
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Error backup data: " + ex.getMessage());
        }
        fillTable(list);
    }//GEN-LAST:event_backupButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        fillTable(list);
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void findingTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findingTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_findingTextActionPerformed

    private void newCDButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newCDButtonMouseClicked
        CDForm cdf = new CDForm(list);

    }//GEN-LAST:event_newCDButtonMouseClicked

    private void newCDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newCDButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newCDButtonActionPerformed

    private void restoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restoreButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        int selectedFile = chooser.showSaveDialog(this);
        if (selectedFile == JFileChooser.APPROVE_OPTION) {
            fileName = chooser.getSelectedFile().getPath();
        }
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(fileName))) {
            oos.writeObject(list);
            oos.close();
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Error restore data: " + ex.getMessage());
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error restore data: " + ex.getMessage());
        }
    }//GEN-LAST:event_restoreButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        delete();
        fillTable(list);
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        fillTable(search());
    }//GEN-LAST:event_searchButtonActionPerformed
    private void fillTable(ArrayList<CD> list) {
        DefaultTableModel model = (DefaultTableModel) Table.getModel();
        int rowCount = Table.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        for (CD cd : list) {
            Object[] row = new Object[]{cd.getTitle(), cd.getCollection(), cd.getType(), cd.getPrice()};
            model.addRow(row);
        }
        pack();
    }

    private void delete() {
        int selectedIndex = Table.getSelectedRow();
        list.remove(selectedIndex);
    }

    private ArrayList<CD> search() {
        String method = findingType.getSelectedItem().toString();
        ArrayList<CD> searched = new ArrayList<>();
        String key = findingText.getText();

        switch (method) {
            case "Title" -> {
                for (CD cd : list) {
                    if (cd.getTitle().contains(key)) {
                        searched.add(cd);
                    }
                }
            }
            case "Collection" -> {
                for (CD cd : list) {
                    if (cd.getCollection().contains(key)) {
                        searched.add(cd);
                    }
                }
            }
            case "Type" -> {
                for (CD cd : list) {
                    if (cd.getType().contains(key)) {
                        searched.add(cd);
                    }
                }
            }
            case "Price" -> {
                Double value = Double.valueOf(findingText.getText());
                for (CD cd : list) {
                    if (cd.getPrice() <= value + 5 && cd.getPrice() >= value - 5) {
                        searched.add(cd);
                    }
                }
            }
        }
        return searched;
    }

    private void fileChooser() {
        JFileChooser chooser = new JFileChooser();
        int selectedFile = chooser.showOpenDialog(this);
        if (selectedFile == JFileChooser.APPROVE_OPTION) {
            fileName = chooser.getSelectedFile().getPath();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JButton backupButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField findingText;
    private javax.swing.JComboBox<String> findingType;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newCDButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton restoreButton;
    private javax.swing.JButton searchButton;
    // End of variables declaration//GEN-END:variables
}
